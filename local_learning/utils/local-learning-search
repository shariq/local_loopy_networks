#!/usr/bin/env python3

import argparse
import local_learning
import logging

logger = logging.getLogger()

from local_learning.models.loopy.search import search_harness

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run checks on loopy.factory sampled models.')
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--quiet', '-q', action='store_true', default=False)
    parser.add_argument('--debug-exceptions', action='store_true', default=False)
    parser.add_argument('--run-once', action='store_true', default=False)
    parser.add_argument('--seed', type=int, default=None, help='random seed to use; defaults to None (helpful for debugging)')

    args = parser.parse_args()

    if args.verbose == 0:
        logger.setLevel(logging.ERROR)
    elif args.verbose == 1:
        logger.setLevel(logging.INFO)
    elif args.verbose > 1:
        logger.setLevel(logging.DEBUG)

    if args.quiet:
        logger.setLevel(logging.CRITICAL)

    if args.seed is not None:
        import numpy as np
        import random
        random.seed(args.seed)
        np.random.seed(args.seed)

    local_learning.debug_exceptions = args.debug_exceptions

    for _, code, results in search_harness():
        total_score = sum(results) / len(results)
        logger.info('got score {} with results {}'.format(total_score, results))
        if args.run_once:
            break
